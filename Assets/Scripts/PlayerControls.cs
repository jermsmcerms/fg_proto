//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MatchControlls"",
            ""id"": ""81eb967c-611f-4f00-95a2-da1118dbaf63"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b0d458c8-8814-4bd5-9b8b-d83cb100d59a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""447e77f2-b36b-48bb-a1b7-63f7dd2eb489"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""51793048-80fd-418c-9929-4d1750ef5c1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""db3d1bf3-f706-4708-ba55-f23c859fc077"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""57b9ab1e-0e8b-448c-929a-1b1dd7c7a82a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""4b9bc590-b26a-4e32-9084-810336c9501b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""b8e3caa0-ac5a-46a2-bd7e-fe7bcf7f7ba1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""89e747dc-ef03-4eee-8105-df6b12bef833"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b41a8225-caff-4a20-8b19-2c06125541f9"",
                    ""path"": ""<HID::ZEROPLUS P4 Wired Gamepad>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6b8e1c26-42d8-4a56-a90b-07d7fab4843b"",
                    ""path"": ""<HID::ZEROPLUS P4 Wired Gamepad>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e91144c5-e999-4ad2-aadb-64bab98d8d47"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1c5fa9c-1d71-410d-b98f-96e53b27fdb6"",
                    ""path"": ""<HID::ZEROPLUS P4 Wired Gamepad>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcf9a250-3c9b-4cb8-95d7-282df04de076"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c7837b3-6aec-4740-bcc9-0d6f4a7d1549"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MatchControlls
        m_MatchControlls = asset.FindActionMap("MatchControlls", throwIfNotFound: true);
        m_MatchControlls_Movement = m_MatchControlls.FindAction("Movement", throwIfNotFound: true);
        m_MatchControlls_Jump = m_MatchControlls.FindAction("Jump", throwIfNotFound: true);
        m_MatchControlls_LightAttack = m_MatchControlls.FindAction("LightAttack", throwIfNotFound: true);
        m_MatchControlls_Crouch = m_MatchControlls.FindAction("Crouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MatchControlls
    private readonly InputActionMap m_MatchControlls;
    private IMatchControllsActions m_MatchControllsActionsCallbackInterface;
    private readonly InputAction m_MatchControlls_Movement;
    private readonly InputAction m_MatchControlls_Jump;
    private readonly InputAction m_MatchControlls_LightAttack;
    private readonly InputAction m_MatchControlls_Crouch;
    public struct MatchControllsActions
    {
        private @PlayerControls m_Wrapper;
        public MatchControllsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MatchControlls_Movement;
        public InputAction @Jump => m_Wrapper.m_MatchControlls_Jump;
        public InputAction @LightAttack => m_Wrapper.m_MatchControlls_LightAttack;
        public InputAction @Crouch => m_Wrapper.m_MatchControlls_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_MatchControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MatchControllsActions set) { return set.Get(); }
        public void SetCallbacks(IMatchControllsActions instance)
        {
            if (m_Wrapper.m_MatchControllsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnJump;
                @LightAttack.started -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnLightAttack;
                @Crouch.started -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_MatchControllsActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_MatchControllsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public MatchControllsActions @MatchControlls => new MatchControllsActions(this);
    public interface IMatchControllsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
}
